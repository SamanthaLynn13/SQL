# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What are the top 5 songs?

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 5



#2. Which artist has the most danceable song and what is the name of that song?
	
SELECT artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 1


#3. What is the average energy of the 5 least popular songs?

First, I found the least popular songsâ€™ popularity ratings

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 5


Then, I found the average energy and tempo of songs where the popularity ratings were less than or equal to 78 (the popularity rating of the 5th least popular song)

SELECT AVG(tempo), AVG(energy)
FROM BIT_DB.Spotifydata
WHERE popularity <= 78

#4. Who is the most popular artist?

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 1

OR

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc

# By not including the limit 1, the query shows that there are 3 artists with the same highest popularity rating


#5. Which song key is most common?

SELECT song_key, COUNT(song_key) AS 'value_occurrence'
FROM BIT_DB.Spotifydata
GROUP BY song_key
ORDER BY 'value_occurrence' desc
LIMIT 1



#6. If you were to create a playlist with the top 20 songs, how long would that playlist be?

First, I found the top 20 songs popularity ratings:
		
SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 20

Then, I found the sum of the duration data where the popularity ratings were greater than or equal to 89

SELECT SUM(duration_ms)
FROM BIT_DB.Spotifydata
WHERE popularity >= 89
